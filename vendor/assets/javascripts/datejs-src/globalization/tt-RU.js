Date.CultureInfo = { 	/* Culture Name */     name: "tt-RU",     englishName: "Tatar (Russia)",     nativeName: "Ð¢Ð°ÑÐ°Ñ (Ð Ð¾ÑÑÐ¸Ñ)",          /* Day Name Strings */     dayNames: ["Ð¯ÐºÑÓÐ¼Ð±Ðµ", "ÐÒ¯ÑÓÐ¼Ð±Ðµ", "Ð¡Ð¸ÑÓÐ¼Ð±Ðµ", "Ð§ÓÑÑÓÐ¼Ð±Ðµ", "ÐÓÐ½ÒÐµÑÓÐ¼Ð±Ðµ", "ÒÐ¾Ð¼Ð³Ð°", "Ð¨Ð¸Ð¼Ð±Ó"],     abbreviatedDayNames: ["Ð¯ÐºÑ", "ÐÒ¯Ñ", "Ð¡Ð¸Ñ", "Ð§ÓÑÑ", "ÐÓÐ½Ò", "ÒÐ¾Ð¼", "Ð¨Ð¸Ð¼"],     shortestDayNames: ["Ð¯ÐºÑ", "ÐÒ¯Ñ", "Ð¡Ð¸Ñ", "Ð§ÓÑÑ", "ÐÓÐ½Ò", "ÒÐ¾Ð¼", "Ð¨Ð¸Ð¼"],     firstLetterDayNames: ["Ð¯", "Ð", "Ð¡", "Ð§", "Ð", "Ò", "Ð¨"],          /* Month Name Strings */     monthNames: ["ÐÑÐ¹Ð½Ð²Ð°ÑÑ", "Ð¤ÐµÐ²ÑÐ°Ð»Ñ", "ÐÐ°ÑÑ", "ÐÐ¿ÑÐµÐ»Ñ", "ÐÐ°Ð¹", "ÐÑÐ½Ñ", "ÐÑÐ»Ñ", "ÐÐ²Ð³ÑÑÑ", "Ð¡ÐµÐ½ÑÑÐ±ÑÑ", "ÐÐºÑÑÐ±ÑÑ", "ÐÐ¾ÑÐ±ÑÑ", "ÐÐµÐºÐ°Ð±ÑÑ"],     abbreviatedMonthNames: ["ÐÑÐ¹Ð½Ð²", "Ð¤ÐµÐ²", "ÐÐ°Ñ", "ÐÐ¿Ñ", "ÐÐ°Ð¹", "ÐÑÐ½", "ÐÑÐ»", "ÐÐ²Ð³", "Ð¡ÐµÐ½", "ÐÐºÑ", "ÐÐ¾Ñ", "ÐÐµÐº"],  	/* AM/PM Designators */     amDesignator: "",     pmDesignator: "",      firstDayOfWeek: 1,     twoDigitYearMax: 2029,          /**      * The dateElementOrder is based on the order of the       * format specifiers in the formatPatterns.DatePattern.       *      * Example:      <pre>      shortDatePattern    dateElementOrder      ------------------  ----------------       "M/d/yyyy"          "mdy"      "dd/MM/yyyy"        "dmy"      "yyyy-MM-dd"        "ymd"      </pre>      *      * The correct dateElementOrder is required by the parser to      * determine the expected order of the date elements in the      * string being parsed.      */     dateElementOrder: "dmy",          /* Standard date and time format patterns */     formatPatterns: {         shortDate: "dd.MM.yyyy",         longDate: "d MMMM yyyy",         shortTime: "H:mm",         longTime: "H:mm:ss",         fullDateTime: "d MMMM yyyy H:mm:ss",         sortableDateTime: "yyyy-MM-ddTHH:mm:ss",         universalSortableDateTime: "yyyy-MM-dd HH:mm:ssZ",         rfc1123: "ddd, dd MMM yyyy HH:mm:ss GMT",         monthDay: "d MMMM",         yearMonth: "MMMM yyyy"     },      /**      * NOTE: If a string format is not parsing correctly, but      * you would expect it parse, the problem likely lies below.       *       * The following regex patterns control most of the string matching      * within the parser.      *       * The Month name and Day name patterns were automatically generated      * and in general should be (mostly) correct.       *      * Beyond the month and day name patterns are natural language strings.      * Example: "next", "today", "months"      *      * These natural language string may NOT be correct for this culture.       * If they are not correct, please translate and edit this file      * providing the correct regular expression pattern.       *      * If you modify this file, please post your revised CultureInfo file      * to the Datejs Forum located at http://www.datejs.com/forums/.      *      * Please mark the subject of the post with [CultureInfo]. Example:      *    Subject: [CultureInfo] Translated "da-DK" Danish(Denmark)      *       * We will add the modified patterns to the master source files.      *      * As well, please review the list of "Future Strings" section below.       */	     regexPatterns: {         jan: /^Ð³ÑÐ¹Ð½Ð²(Ð°ÑÑ)?/i,         feb: /^ÑÐµÐ²(ÑÐ°Ð»Ñ)?/i,         mar: /^Ð¼Ð°Ñ(Ñ)?/i,         apr: /^Ð°Ð¿Ñ(ÐµÐ»Ñ)?/i,         may: /^Ð¼Ð°Ð¹/i,         jun: /^Ð¸ÑÐ½(Ñ)?/i,         jul: /^Ð¸ÑÐ»(Ñ)?/i,         aug: /^Ð°Ð²Ð³(ÑÑÑ)?/i,         sep: /^ÑÐµÐ½(ÑÑÐ±ÑÑ)?/i,         oct: /^Ð¾ÐºÑ(ÑÐ±ÑÑ)?/i,         nov: /^Ð½Ð¾Ñ(Ð±ÑÑ)?/i,         dec: /^Ð´ÐµÐº(Ð°Ð±ÑÑ)?/i,          sun: /^ÑÐºÑÓÐ¼Ð±Ðµ/i,         mon: /^Ð´Ò¯ÑÓÐ¼Ð±Ðµ/i,         tue: /^ÑÐ¸ÑÓÐ¼Ð±Ðµ/i,         wed: /^ÑÓÑÑÓÐ¼Ð±Ðµ/i,         thu: /^Ð¿ÓÐ½ÒÐµÑÓÐ¼Ð±Ðµ/i,         fri: /^ÒÐ¾Ð¼Ð³Ð°/i,         sat: /^ÑÐ¸Ð¼Ð±Ó/i,          future: /^next/i,         past: /^last|past|prev(ious)?/i,         add: /^(\+|aft(er)?|from|hence)/i,         subtract: /^(\-|bef(ore)?|ago)/i,                  yesterday: /^yes(terday)?/i,         today: /^t(od(ay)?)?/i,         tomorrow: /^tom(orrow)?/i,         now: /^n(ow)?/i,                  millisecond: /^ms|milli(second)?s?/i,         second: /^sec(ond)?s?/i,         minute: /^mn|min(ute)?s?/i, 		hour: /^h(our)?s?/i, 		week: /^w(eek)?s?/i,         month: /^m(onth)?s?/i,         day: /^d(ay)?s?/i,         year: /^y(ear)?s?/i, 		         shortMeridian: /^(a|p)/i,         longMeridian: /^(a\.?m?\.?|p\.?m?\.?)/i,         timezone: /^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt|utc)/i,         ordinalSuffix: /^\s*(st|nd|rd|th)/i,         timeContext: /^\s*(\:|a(?!u|p)|p)/i     },  	timezones: [{name:"UTC", offset:"-000"}, {name:"GMT", offset:"-000"}, {name:"EST", offset:"-0500"}, {name:"EDT", offset:"-0400"}, {name:"CST", offset:"-0600"}, {name:"CDT", offset:"-0500"}, {name:"MST", offset:"-0700"}, {name:"MDT", offset:"-0600"}, {name:"PST", offset:"-0800"}, {name:"PDT", offset:"-0700"}] };  /********************  ** Future Strings **  ********************  *   * The following list of strings may not be currently being used, but   * may be incorporated into the Datejs library later.   *  * We would appreciate any help translating the strings below.  *   * If you modify this file, please post your revised CultureInfo file  * to the Datejs Forum located at http://www.datejs.com/forums/.  *  * Please mark the subject of the post with [CultureInfo]. Example:  *    Subject: [CultureInfo] Translated "da-DK" Danish(Denmark)b  *  * English Name        Translated  * ------------------  -----------------  * about               about  * ago                 ago  * date                date  * time                time  * calendar            calendar  * show                show  * hourly              hourly  * daily               daily  * weekly              weekly  * bi-weekly           bi-weekly  * fortnight           fortnight  * monthly             monthly  * bi-monthly          bi-monthly  * quarter             quarter  * quarterly           quarterly  * yearly              yearly  * annual              annual  * annually            annually  * annum               annum  * again               again  * between             between  * after               after  * from now            from now  * repeat              repeat  * times               times  * per                 per  * min (abbrev minute) min  * morning             morning  * noon                noon  * night               night  * midnight            midnight  * mid-night           mid-night  * evening             evening  * final               final  * future              future  * spring              spring  * summer              summer  * fall                fall  * winter              winter  * end of              end of  * end                 end  * long                long  * short               short  */